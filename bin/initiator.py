#!/usr/bin/env python
# this program aims to identify the putative microRNA/sRNA initiator triggering the biogenesis of phased siRNAs
# By Ji Huang, Crop Bioinformatics Group, NJAU, 2018. (C)Copyright reserved.
# Only for internal test within CBG. No free distribution without the writing permission from CBG.

import sys
if __name__ == '__main__':

    tag = False
    phaselength = 21
    shift = 1
    distance = 5
    for arg in range(len(sys.argv)):
        if sys.argv[arg]=='-i':
            inputfile=sys.argv[arg+1] #the file generated by SPHASE.py with -o, required
        elif sys.argv[arg]=='-j':
            psRNAtarget=sys.argv[arg+1] #the target prediction file by psRNAtarget, required
        elif sys.argv[arg]=='-pd':
            distance=int(sys.argv[arg+1]) #the microRNA distance away to phase border, default=105(21) or 120 (24), optional
        elif sys.argv[arg]=='-pl':
            phaselength=int(sys.argv[arg+1]) #21 or 24, the phase length of 21 or 24, required
        elif sys.argv[arg]=='-ps':
            shift=int(sys.argv[arg+1]) #0 or 1, the position of cleavage at 10-11 (0) or 9-12 (1), default=1
        elif sys.argv[arg]=='-o':
            outputfilename=sys.argv[arg+1] #outputfilename
        elif sys.argv[arg]=='-ip':
            PHAS_Loci_info=sys.argv[arg+1] 
        elif sys.argv[arg]=='-h':
            print('initiator option:')
            print(' -i  [str]integration -o output')
            print(' -j  [str]the target predicted by psRNAtarget server or target module')
            print(' -ip [str]integration -po output')
            print(' -pd [int]the microRNA distance away to phase border, default=105(21) or 120 (24), optional')
            print(' -pd [int]')
            print(' -pl [int]21 or 24, the phase length of 21 or 24, default=21')
            print(' -ps [int]0 or 1, the position of cleavage at 10(0) or 9-11 (1), default=1')
            print(' -o  [str]outputfilename.')
            print(' -h  print the version and details of the usage')
            sys.exit()


    if phaselength == 0 or inputfile=='' or outputfilename=='' or psRNAtarget=='':
        print('Please input all necessary parameters, type phasihunter initiator -h for help.')
        sys.exit()

    # if distance==0:
    #     if phaselength == 21:
    #         distance=105
    #     else:
    #         distance=120
    distance = distance * phaselength

    print('Loading PHAS Loci information')
    with open(PHAS_Loci_info, 'r') as fn:
        filter_list = []
        for line in fn:
            line1 = line.strip()
            l = line.strip().split("\t")
            if line1.startswith('feature'):
                continue
            # feature	PHAS_Loci	Genome_start	Genome_end	transcript_start	transcript_end	method_ref	pvalue	phase_score	phase_ratio	tag
            feature, PHAS_Loci, tag = l[0], l[1], l[10] 
            filter_list.append(tag)

    record_all={}
    PHASnames = []
    print("Loading phased siRNA file...")
    for line in open(inputfile, 'r'):
        if line.startswith('>'):
            continue
        if line.startswith('#'):
            continue
        record=str(line.split('\t')[-1].strip())
        name = line.split('\t')[0]
        test_tag = line.split('\t')[-1].strip()
        if test_tag not in filter_list:
            continue
        if name not in PHASnames:
            PHASnames.append(name)
        if record in record_all:
            record_all[record]+=[line]
        else:
            record_all[record]=[line] #add record according to the record_markers
    # read cDNA libaray
    read_seq={}

    result=['miRNA\tGeneID\tCleavage_site\tTarget_pos_end\tPosmax/min\tDistance\tInitiator_seq\tInitiator_len\tRecordmarker\tHit_type\n'] 
    print("Loading psRNAtarget analysis data..")
    m_all={}
    miR_tar = {} # zby revised
    for line in open (psRNAtarget, 'r'):
        if line.startswith("#") or line.startswith("miRNA"):
            pass
        else:
            line1=line.split('\t')
            test = line1[1].split('__')
            if len(test) == 1:
                if line1[1] in PHASnames:
                    if line1[1] in m_all:
                        m_all[line1[1]]+=[line]
                    else:
                        m_all[line1[1]]=[line]
                    if line1[0]+"_"+line1[1] in miR_tar.keys(): # zby revised
                        miR_tar[line1[0]+"_"+line1[1]].append(int(line1[7])) # zby revised
                    else: # zby revised
                        miR_tar[line1[0]+"_"+line1[1]] = [int(line1[7])] # zby revised
            else:
                tag = True
                gene = test[1]
                if gene in PHASnames:
                    if gene in m_all:
                        m_all[gene]+=[line]
                    else:
                        m_all[gene]=[line]
                    if line1[0]+"_"+gene in miR_tar.keys(): # zby revised
                        miR_tar[line1[0]+"_"+gene].append(int(line1[7])) # zby revised
                    else: # zby revised
                        miR_tar[line1[0]+"_"+gene] = [int(line1[7])] # zby revised




    
    print("Phase siRNA loaded.")
    print("Analysing...")
    minf={}
    maxf={}
    # get cluster min pos and max pos
    for key in record_all.keys(): #loop with record_markers
        # each record cluster, seperately
        minf['-']=99999999990
        minf['+']=99999999999
        maxf['-']=0
        maxf['+']=0
        geneids = []
        
        for i in range(len(record_all[key])):
            line=record_all[key][i].split('\t')
            tmp_geneid=line[0]
            geneids.append(tmp_geneid)
            strand=line[1]
            pos=int(line[2])
            if strand=='-':
                if minf['-']>=pos:
                    minf['-']=pos
            elif strand=='+':
                if minf['+']>=pos:
                    minf['+']=pos

            if strand=='-': # zby revised
                if maxf['-']<=pos: # zby revised
                    maxf['-']=pos # zby revised
            elif strand=='+': # zby revised
                if maxf['+']<=pos: # zby revised
                    maxf['+']=pos # zby revised

            recordmarker=line[-1].strip()
            #print recordmarker
        if minf['-']<=minf['+']:
            posmin=minf['-']+2
        else:
            posmin=minf['+']
        
        if maxf['-']>=maxf['+']: # zby revised
            posmax=maxf['-']+2 # zby revised
        else: # zby revised
            posmax=maxf['+'] # zby revised

       
       
        # if recordmarker==277:
        #     print(posmin, minf['-'],minf['+'])

        for geneid in list(set(geneids)):
            if geneid in m_all:
                for j in range(len(m_all[geneid])):
                    line2=m_all[geneid][j].split('\t')
                    miRNAid=line2[0]
                    miRNAseq=line2[8].replace('U','T')
                    miRNA_pos=int(line2[4])
                    target_pos_start=int(line2[6])
                    target_pos_end=int(line2[7])-1
                    cleavage_site=target_pos_end-9
                    
                    Distance = 0 # zby revised
                    if shift==0:
                        #cleavage_site = target_pos_end - 9+ miRNA_pos-1
                        # 3' cleavage and 5' cleavage
                        if cleavage_site-posmax>=0 and cleavage_site-posmax<=distance:
                            if cleavage_site-posmax%int(phaselength)==0:
                                if min(miR_tar[miRNAid+"_"+geneid]) <= posmin:
                                    Distance = cleavage_site-posmax
                                    result.append(miRNAid+'\t'+geneid+'\t'+str(cleavage_site)+'\t'+str(target_pos_end)+'\t'+str(posmax)+'\t'+str(Distance)+'\t'+miRNAseq+'\t'+str(len(miRNAseq))+'\t'+str(recordmarker)+'\t3-hit\n')
                        # 5' cleavage
                        if posmin-cleavage_site>=0 and posmin-cleavage_site<=distance:
                            if (posmin-cleavage_site)%int(phaselength)==0: 
                                Distance = posmin-cleavage_site
                                result.append(miRNAid+'\t'+geneid+'\t'+str(cleavage_site)+'\t'+str(target_pos_end)+'\t'+str(posmin)+'\t'+str(Distance)+'\t'+miRNAseq+'\t'+str(len(miRNAseq))+'\t'+str(recordmarker)+'\t5-hit\n')


                    else:
                        cleavage_sites=[cleavage_site-1, cleavage_site, cleavage_site+1]                    
                        for k in cleavage_sites:     
                            if k-posmax>=0 and k-posmax<=distance:
                                if abs(k-posmax)%int(phaselength)==0:
                                    if min(miR_tar[miRNAid+"_"+geneid]) <= posmin:
                                        Distance = k-posmax
                                        result.append(miRNAid+'\t'+geneid+'\t'+str(cleavage_site)+'\t'+str(target_pos_end)+'\t'+str(posmax)+'\t'+str(Distance)+'\t'+miRNAseq+'\t'+str(len(miRNAseq))+'\t'+str(recordmarker)+'\t3-hit\n')
                            if posmin-k>=0 and posmin-k<=distance:
                                if (posmin-k)%int(phaselength)==0:
                                    Distance = posmin-cleavage_site
                                    result.append(miRNAid+'\t'+geneid+'\t'+str(cleavage_site)+'\t'+str(target_pos_end)+'\t'+str(posmin)+'\t'+str(Distance)+'\t'+miRNAseq+'\t'+str(len(miRNAseq))+'\t'+str(recordmarker)+'\t5-hit\n')

    resultw=open(outputfilename,'w')
    resultw.writelines(result)
    print("Analysis completed! %s records saved!"%(len(result)-1))
